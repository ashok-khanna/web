#+DATE: 24 July 2021

#+TITLE: Symbols & Data Objects

Previous: [[file:clbe-1.org][1. Introduction]]

Next: [[file:clbe-3.org][3. Global Variables & Assignment]]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

We mentioned symbols in passing earlier but it is worth expanding on
them a bit more here. Symbols are fully fledged objects in Lisp and we
will discuss them in depth later. For our current purposes however we
will focus on their role as names for objects. All variables and
functions are named by a symbol, and so are special forms and macros.

When we enter any non-numeric code that is not a quoted string in
Lisp, we are generally entering in a symbol. Lisp will then look up
the symbol in a global table and retrieve the relevant object for
evaluation. You can start to see the consistency of the language. Lisp
extracts the first element of each form it receives, and looks up the
symbol named by this element to get the appropriate evaluation
rule. It then applies this evaluation rule to the form.  2.1 Variables
Lisp has a unique approach to variables and data objects. Variables
are a place in computer memory that hold a pointer to a data
object. Assigning a variable a new value will change what object the
variable points to, but has no effect on the previously referenced
object. That said, if a variable holds a reference to a mutable
object, we can use that reference to modify that object and the
modification will be visible to any code that also has a reference to
the same object.

Variables themselves do not have a type, it is the underlying data
object that is typed. A variable can have any Lisp object as its
value. Lisp is accordingly a dynamically-typed language.

