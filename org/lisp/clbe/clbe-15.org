#+DATE: 24 July 2021

#+TITLE: Hash Tables

Previous: [[file:clbe-14.org][14. Arrays & Sequences]]

Next: [[file:clbe-16.org][16. Structures]]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

A hash table is a way of associating pairs of objects, like a
dictionary. The objects stored in a hash table or used as keys can be
of any type. We can make hastables with MAKE-HASH-TABLE and retrieve
values associated with a given key with GETHASH:

#+begin_src lisp

  (defparameter my-hash-table (make-hash-table))

  ;; Returns NIL as not yet set
  
  (gethash 'color my-hash-table) 

#+end_src

Similar to other structures, we use SETF to set values. Hash tables
can accommodate any number of elements, because they are expanded when
they run out of space. We can remove values with REMHASH.

#+begin_src lisp

  ;; Returns RED
  
  (setf (gethash 'color my-hash-table) 'red)

  (remhash 'color my-hash-table)

#+end_src

Finally, the function MAPHASH allows you to iterate over all entries
in the hash table. Its first argument must be a function which accepts
two arguments, the key and the value of each entry. Note that due to
the nature of hash tables you can't control the order in which the
entries are provided to MAPHASH (or other traversing constructs):
	
#+begin_src lisp

  (maphash #'(lambda (key value)
	       (format t "~A = ~A~%" key value))
	   my-hash-table)

#+end_src
