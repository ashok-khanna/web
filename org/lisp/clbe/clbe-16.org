#+DATE: 24 July 2021

#+TITLE: Structures

Previous: [[file:clbe-15.org][15. Hash Tables]]

Next: [[file:clbe-17.org][17. Reading & Writing to Files]]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

Common Lisp provides the DEFSTRUCT facility for creating named data
structures with named components. This makes it easier to manipulate
custom data objects as we can refer to their components by
name. Constructor, access and assignment constructs are automatically
defined when a data type is defined through DEFSTRUCT.

Consider the below example of defining a data type for
rectangles. DEFSTRUCT defines RECTANGLE to be a structure with two
fields, height and width. The symbol RECTANGLE becomes the name of a
data type and each rectangle will be of type RECTANGLE, then
STRUCTURE, then ATOM and then T. DEFSTRUCT generates four associated
functions:

1. RECTANGLE-HEIGHT and RECTANGLE-WIDTH to access elements of the
     structure

2. RECTANGLE-P to test whether an object is of type rectangle

3. MAKE-RECTANGLE to create rectangles

4. COPY-RECTANGLE to create copies of rectangles

* Example of a Structure

#+begin_src lisp

  ;; Height will default to NIL
  ;; Width will default to 5 

  (defstruct rectangle (height)
	     (width 5))
  
  (defvar rectangle-1)

  (setf rectangle-1
	(make-rectangle :height 10 :width 15))
	
  ;; Returns 10
  
  (rectangle-height rectangle-1)

  ;; Returns 20

  (setf (rectangle-width rectangle-1) 20)

  (defvar rectangle-2)

  (setf rectangle-2 (make-rectangle))

  ;; Prints #S(RECTANGLE :HEIGHT NIL :WIDTH 5)
  
  rectangle-2

#+end_src

There are some advanced initialization options that we will not
discuss here. Note that the the #S syntax can be used to read
instances of rectangle structures.
